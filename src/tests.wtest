import wollok.game.*
import items.*
import comandos.*
import seresVivos.*
import enemigos.*
import escenarios.*
import recursos.*
import construccion.*

describe "El heroe (mago) nos dice su estado" {

	method initialize() {
		game.cellSize(32)
		game.addVisual(mapaActual)
		configuracion.inicioDelJuegoMago()
	}

	test "El heroe dice su mana" {
		assert.equals("Mana      250/250", mago.decirMana())
	}

	test "El heroe muestra su inventario y est치 vacio" {
		assert.equals("Piedras =0 Maderas =0", mago.decirInventario())
	}

	test "El heroe muestra su oro y no tiene oro" {
		assert.equals("Tengo 0 oro", mago.decirOro())
	}

	test "El heroe dice su nivel y exp, y est치 en nivel 1 con 0 de exp" {
		assert.equals("Nivel=1  XP=0/100", mago.decirNivelYExp())
	}

	test "El heroe muestra su vida y tiene 150/150" {
		assert.equals("Vida      150/150", mago.decirVida())
	}

	test "El heroe no tiene un b치culo como arma equipada" {
		assert.notEquals("baculo", mago.armaEquipada())
	}

	test "El heroe tiene una barita como arma equipada" {
		assert.notEquals("barita", mago.armaEquipada())
	}

}

describe "Guerrero consigue recursos e interactua con las casas" {

	method initialize() {
		game.cellSize(32)
		game.addVisual(mapaActual)
		configuracion.inicioDelJuegoGuerrero()
		mapaActual.cambiarMapa(explanada2)
		configuracion.comandos()
	}

	test "el Guerrero consigue madera" {
		guerrero.position(game.at(8, 7)) // hay un arbol en 8,8 
		guerrero.ultimaDireccion(arriba) // el guerrero mira hacia donde esta el arbol
		guerrero.interactuar()
		assert.that(guerrero.poseeMadera())
	}

	test "el Guerrero consigue piedras" {
		guerrero.position(game.at(4, 0)) // hay una piedra en 4,1
		guerrero.ultimaDireccion(arriba)
		guerrero.interactuar()
		assert.that(guerrero.poseePiedras())
	}

	test "el Guerrero cambia su piedra en el Mercado y gana 50 de oro" {
		mapaActual.cambiarMapa(explanada)
		guerrero.agregar(piedra)
		guerrero.position(game.at(1, 1)) // el mercado esta en 1,2 de explanada1
		guerrero.ultimaDireccion(arriba)
		construccionMercado.comprar(guerrero)
		assert.equals("Tengo 50 oro", guerrero.decirOro())
		assert.notThat(guerrero.poseePiedras())
	}

	test "el Guerrero cambia su madera en el Mercado y gana 75 de oro" {
		mapaActual.cambiarMapa(explanada)
		guerrero.agregar(madera)
		guerrero.position(game.at(1, 1)) // el mercado esta en 1,2 de explanada1
		guerrero.ultimaDireccion(arriba)
		construccionMercado.vender(guerrero)
		assert.equals("Tengo 75 oro", guerrero.decirOro())
	}

	test "el Guerrero compra una espada en la Casa de Armaduras" {
		mapaActual.cambiarMapa(explanada)
		// el heroe tiene que tener por lo menos 100 de oro
		guerrero.oro(100)
		guerrero.position(game.at(12, 6)) // casa de armaduras esta en 12,7 de explanada1
		guerrero.ultimaDireccion(arriba)
		construccionArmadura.inventario(#{ espada })
		construccionArmadura.comprar(guerrero)
		assert.equals(espada, guerrero.armaEquipada())
	}

	test "el Guerrero mejora su arma en la Casa de Armaduras" {
		// el heroe tiene que tener por lo menos 200 de oro
		// oro restante: 0
		// los puntos de da침o del arma se multiplican x 10
		mapaActual.cambiarMapa(explanada)
		// el heroe tiene que tener por lo menos 100 de oro
		guerrero.oro(200)
		guerrero.position(game.at(12, 6)) // casa de armaduras esta en 12,7 de explanada1
		guerrero.ultimaDireccion(arriba)
		construccionArmadura.vender(guerrero)
		const armaDelGuerrero = guerrero.armaEquipada()
		assert.equals(110, armaDelGuerrero.puntosDeDanio())
	}

}


  describe "Mago consigue recursos e interactua con las casas" {
	
	method initialize() {
		game.cellSize(32)
		game.addVisual(mapaActual)
		configuracion.inicioDelJuegoMago()
		mapaActual.cambiarMapa(explanada2)
		configuracion.comandos()
	}
	
  	test "el Mago consigue madera" {
 		mago.position(game.at(8, 7)) // hay un arbol en 8,8 
		mago.ultimaDireccion(arriba) // el mago mira hacia donde esta el arbol
		mago.interactuar()
		assert.that(mago.poseeMadera())
  	}

 	test "el Mago consigue piedras" {
 		mago.position(game.at(4, 0)) // hay una piedra en 4,1
		mago.ultimaDireccion(arriba)
		mago.interactuar()
		assert.that(mago.poseePiedras())
  	}

  	test "el Mago cambia su madera por oro en el Mercado" {
 		mapaActual.cambiarMapa(explanada)
		mago.agregar(madera)
		mago.position(game.at(1, 1)) // el mercado esta en 1,2 de explanada1
		mago.ultimaDireccion(arriba)
		construccionMercado.vender(mago)
		assert.equals("Tengo 75 oro", mago.decirOro())
  	}
	
	test "el Mago cambia su piedra por oro en el Mercado" {
 		mapaActual.cambiarMapa(explanada)
		mago.agregar(piedra)
		mago.position(game.at(1, 1)) // el mercado esta en 1,2 de explanada1
		mago.ultimaDireccion(piedra)
		construccionMercado.comprar(mago)
		assert.equals("Tengo 50 oro", mago.decirOro())
  	}
  	
  	test "el Mago intenta comprar una barita en la Casa de Magia, y no tiene suficiente oro" {
  		mapaActual.cambiarMapa(explanada)
		// el heroe tiene que tener por lo menos 100 de oro
		mago.oro(100)
		mago.position(game.at(12, 6)) // casa de armaduras esta en 12,7 de explanada1
		mago.ultimaDireccion(arriba)
		construccionMagia.inventario(#{ barita })
		assert.throwsException({construccionMagia.comprar(mago)})
		}
		
  	test "el Mago compra una barita en la Casa de Magia y la mejora" {
  		mapaActual.cambiarMapa(explanada)
		mago.oro(450)
		mago.position(game.at(12, 6)) // casa de armaduras esta en 12,7 de explanada1
		mago.ultimaDireccion(arriba)
		construccionMagia.inventario(#{ barita })
		construccionMagia.comprar(mago)
		construccionMagia.vender(mago)
		const armaDelMago= mago.armaEquipada()
		assert.equals(90, armaDelMago.puntosDeDanio())
		}
  }
 
describe "Guerrero ataca enemigo"{
 	const enemigo = crear.darUnEnemigoVertical(5,6)
 	
 	method initialize() {
 		game.cellSize(32)
		game.addVisual(mapaActual)
		configuracion.inicioDelJuegoGuerrero()
		mapaActual.cambiarMapa(explanada)
		configuracion.comandos()
		guerrero.position(game.at(5,5))	
	}
	
	test "enemigo ataca a guerrero y queda con 240 de vida"{
		enemigo.atacar()
		assert.equals(240, guerrero.vida())
	}
	
	test "enemigo ataca a guerrero, se defiende y queda con 250 de vida"{
		guerrero.defenderse()
		enemigo.atacar()
		assert.equals(250, guerrero.vida())
	}
	
 }



